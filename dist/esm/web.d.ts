import { WebPlugin } from '@capacitor/core';
import { Product } from "./dto/Product";
import { PurchaseOptions } from "./dto/PurchaseOptions";
import { Entitlement } from "./dto/Entitlement";
import { PurchaseModel } from "./dto/PurchaseModel";
import { PurchaseUpdateModel } from "./dto/PurchaseUpdateModel";
import { Offerings } from "./dto/Offerings";
import { IntroEligibility } from "./dto/IntroEligibility";
import { User } from "./dto/User";
import { RemoteConfig } from "./dto/RemoteConfig";
import { RemoteConfigList } from "./dto/RemoteConfigList";
import { AttributionProvider, UserPropertyKey } from "./dto/enums";
import { UserProperties } from "./dto/UserProperties";
import { EntitlementsUpdateListener } from "./dto/EntitlementsUpdateListener";
import { PromoPurchasesListener } from "./dto/PromoPurchasesListener";
import type { QonversionPlugin } from './definitions';
export declare class QonversionWeb extends WebPlugin implements QonversionPlugin {
    attachUserToExperiment(experimentId: string, groupId: string): Promise<void>;
    attachUserToRemoteConfiguration(remoteConfigurationId: string): Promise<void>;
    attribution(data: Object, provider: AttributionProvider): void;
    checkEntitlements(): Promise<Map<string, Entitlement>>;
    checkTrialIntroEligibility(ids: string[]): Promise<Map<string, IntroEligibility>>;
    collectAdvertisingId(): void;
    collectAppleSearchAdsAttribution(): void;
    detachUserFromExperiment(experimentId: string): Promise<void>;
    detachUserFromRemoteConfiguration(remoteConfigurationId: string): Promise<void>;
    identify(userID: string): Promise<User>;
    isFallbackFileAccessible(): Promise<Boolean>;
    logout(): void;
    offerings(): Promise<Offerings | null>;
    presentCodeRedemptionSheet(): void;
    products(): Promise<Map<string, Product>>;
    purchase(purchaseModel: PurchaseModel): Promise<Map<string, Entitlement>>;
    purchaseProduct(product: Product, options: PurchaseOptions): Promise<Map<string, Entitlement>>;
    remoteConfig(contextKey: string | undefined): Promise<RemoteConfig>;
    remoteConfigList(): Promise<RemoteConfigList>;
    remoteConfigListForContextKeys(contextKeys: Array<string>, includeEmptyContextKey: boolean): Promise<RemoteConfigList>;
    restore(): Promise<Map<string, Entitlement>>;
    setCustomUserProperty(key: string, value: string): void;
    setEntitlementsUpdateListener(listener: EntitlementsUpdateListener): void;
    setPromoPurchasesDelegate(delegate: PromoPurchasesListener): void;
    setUserProperty(key: UserPropertyKey, value: string): void;
    syncHistoricalData(): void;
    syncPurchases(): void;
    syncStoreKit2Purchases(): void;
    updatePurchase(purchaseUpdateModel: PurchaseUpdateModel): Promise<Map<string, Entitlement> | null>;
    userInfo(): Promise<User>;
    userProperties(): Promise<UserProperties>;
}
