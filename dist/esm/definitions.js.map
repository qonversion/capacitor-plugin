{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAiTA,cAAc,aAAa,CAAC;AAC5B,cAAc,mBAAmB,CAAC;AAClC,cAAc,wBAAwB,CAAC;AACvC,cAAc,gBAAgB,CAAC;AAC/B,cAAc,iBAAiB,CAAC;AAChC,cAAc,eAAe,CAAC;AAC9B,cAAc,uBAAuB,CAAC;AACtC,cAAc,YAAY,CAAC;AAC3B,cAAc,oBAAoB,CAAC;AACnC,cAAc,sBAAsB,CAAC;AACrC,cAAc,oBAAoB,CAAC;AACnC,cAAc,2BAA2B,CAAC;AAC1C,cAAc,kBAAkB,CAAC;AACjC,cAAc,mBAAmB,CAAC;AAClC,cAAc,oBAAoB,CAAC;AACnC,cAAc,wBAAwB,CAAC;AACvC,cAAc,iCAAiC,CAAC;AAChD,cAAc,uBAAuB,CAAC;AACtC,cAAc,0BAA0B,CAAC;AACzC,cAAc,yCAAyC,CAAC;AACxD,cAAc,mDAAmD,CAAC;AAClE,cAAc,yCAAyC,CAAC;AACxD,cAAc,kCAAkC,CAAC;AACjD,cAAc,yCAAyC,CAAC;AACxD,cAAc,yCAAyC,CAAC;AACxD,cAAc,qBAAqB,CAAC;AACpC,cAAc,2BAA2B,CAAC;AAC1C,cAAc,uBAAuB,CAAC;AACtC,cAAc,8BAA8B,CAAC;AAC7C,cAAc,kCAAkC,CAAC;AACjD,cAAc,8BAA8B,CAAC;AAC7C,cAAc,+BAA+B,CAAC;AAC9C,cAAc,uCAAuC,CAAC;AACtD,cAAc,0CAA0C,CAAC;AACzD,cAAc,gCAAgC,CAAC;AAC/C,cAAc,oBAAoB,CAAC","sourcesContent":["import {\n  AttributionProvider,\n  UserPropertyKey\n} from './dto/enums';\nimport {IntroEligibility} from './dto/IntroEligibility';\nimport {Offerings} from './dto/Offerings';\nimport {Product} from './dto/Product';\nimport {User} from './dto/User';\nimport {UserProperties} from './dto/UserProperties';\nimport {RemoteConfig} from './dto/RemoteConfig';\nimport {RemoteConfigList} from './dto/RemoteConfigList';\nimport {PurchaseModel} from './dto/PurchaseModel';\nimport {PurchaseUpdateModel} from './dto/PurchaseUpdateModel';\nimport {PurchaseOptions} from './dto/PurchaseOptions';\nimport {Entitlement} from './dto/Entitlement';\nimport {EntitlementsUpdateListener} from './dto/EntitlementsUpdateListener';\nimport {PromoPurchasesListener} from './dto/PromoPurchasesListener';\n\nexport interface QonversionPlugin {\n  /**\n   * Call this function to sync the subscriber data with the first launch when Qonversion is implemented.\n   */\n  syncHistoricalData(): void;\n\n  /**\n   * iOS only\n   * Contact us before you start using this function\n   * Call this function to sync purchases if you are using StoreKit2 and our SDK in Analytics mode.\n   */\n  syncStoreKit2Purchases(): void;\n\n  /**\n   * Make a purchase and validate it through server-to-server using Qonversion's Backend\n   * @param product product to purchase\n   * @param options additional options for the purchase process.\n   * @returns the promise with the user entitlements including the ones obtained by the purchase\n   *\n   * @see [Making Purchases](https://documentation.qonversion.io/docs/making-purchases)\n   */\n  purchaseProduct(product: Product, options: PurchaseOptions): Promise<Map<string, Entitlement>>\n\n  /**\n   * Make a purchase and validate it through server-to-server using Qonversion's Backend.\n   *\n   * @deprecated Use {@link purchaseProduct} function instead.\n   * @param purchaseModel necessary information for purchase\n   * @returns the promise with the user entitlements including the ones obtained by the purchase\n   * @see [Making Purchases](https://documentation.qonversion.io/docs/making-purchases)\n   */\n  purchase(purchaseModel: PurchaseModel): Promise<Map<string, Entitlement>>;\n\n  /**\n   * Android only. Returns `null` if called on iOS.\n   *\n   * Update (upgrade/downgrade) subscription on Google Play Store and validate it through server-to-server using Qonversion's Backend.\n   *\n   * @deprecated Use {@link purchaseProduct} function instead.\n   * @param purchaseUpdateModel necessary information for purchase update\n   * @returns the promise with the user entitlements including updated ones.\n   * @see [Update policy](https://developer.android.com/google/play/billing/subscriptions#replacement-modes)\n   * @see [Making Purchases](https://documentation.qonversion.io/docs/making-purchases)\n   */\n  updatePurchase(purchaseUpdateModel: PurchaseUpdateModel): Promise<Map<string, Entitlement> | null>;\n\n  /**\n   * Returns Qonversion products in association with Apple and Google Play Store Products.\n   *\n   * @returns the promise with Qonversion products\n   */\n  products(): Promise<Map<string, Product>>;\n\n  /**\n   * Return Qonversion Offerings Object.\n   *\n   * An offering is a group of products that you can offer to a user on a given paywall based on your business logic.\n   * For example, you can offer one set of products on a paywall immediately after onboarding and another\n   * set of products with discounts later on if a user has not converted.\n   * Offerings allow changing the products offered remotely without releasing app updates.\n   *\n   * @returns the promise with Qonversion offerings\n   *\n   * @see [Offerings](https://qonversion.io/docs/offerings) for more details\n   */\n  offerings(): Promise<Offerings | null>;\n\n  /**\n   * You can check if a user is eligible for an introductory offer, including a free trial.\n   * You can show only a regular price for users who are not eligible for an introductory offer.\n   *\n   * @param ids products identifiers that must be checked\n   * @returns the promise with eligibility map\n   */\n  checkTrialIntroEligibility(ids: string[]): Promise<Map<string, IntroEligibility>>;\n\n  /**\n   * You need to call the checkEntitlements method to check if a user has the required entitlement.\n   *\n   * This method will check the user receipt and will return the current entitlements.\n   *\n   * @returns the promise with the entitlements\n   *\n   * If Apple or Google servers are not responding at the time of the request, Qonversion provides the latest\n   * entitlements' data from its database.\n   */\n  checkEntitlements(): Promise<Map<string, Entitlement>>;\n\n  /**\n   * Restores users purchases in your app, to maintain access to purchased content.\n   * Users sometimes need to restore purchased content, such as when they upgrade to a new phone.\n   *\n   * @returns the promise with the user entitlements\n   */\n  restore(): Promise<Map<string, Entitlement>>;\n\n  /**\n   * Android only. Does nothing if called on iOS.\n   *\n   * This method will send all purchases to the Qonversion backend. Call this every time when purchase is handled\n   * by your own implementation.\n   *\n   * **Warning!**\n   *\n   * This method works for Android only.\n   * It should only be called if you're using Qonversion SDK in observer mode.\n   *\n   * @see [Observer mode for Android SDK](https://documentation.qonversion.io/docs/observer-mode#android-sdk)\n   */\n  syncPurchases(): void;\n\n  /**\n   * Call this function to link a user to his unique ID in your system and share purchase data.\n   *\n   * @param userID unique user ID in your system\n   * @returns the promise with the information about the identified user.\n   */\n  identify(userID: string): Promise<User>;\n\n  /**\n   * Call this function to unlink a user from his unique ID in your system and his purchase data.\n   */\n  logout(): void;\n\n  /**\n   * This method returns information about the current Qonversion user.\n   * @returns the promise with the information about the user.\n   */\n  userInfo(): Promise<User>;\n\n  /**\n   * Returns Qonversion remote config object by {@link contextKey} or default one if the key is not specified.\n   * Use this function to get the remote config with specific payload and experiment info.\n   * @returns the promise with the remote config.\n   */\n  remoteConfig(contextKey: string | undefined): Promise<RemoteConfig>\n\n  /**\n   * Returns Qonversion remote config objects for all existing context key (including empty one).\n   * Use this function to get the remote config with specific payload and experiment info.\n   * @returns the promise with the remote config list.\n   */\n  remoteConfigList(): Promise<RemoteConfigList>\n\n  /**\n   * Returns Qonversion remote config objects by a list of {@link contextKeys}.\n   * Use this function to get the remote config with specific payload and experiment info.\n   * @param contextKeys list of context keys to load remote configs for\n   * @param includeEmptyContextKey set to true if you want to include remote config with empty context key to the result\n   * @returns the promise with the remote config list.\n   */\n  remoteConfigListForContextKeys(contextKeys: Array<string>, includeEmptyContextKey: boolean): Promise<RemoteConfigList>\n\n  /**\n   * This function should be used for the test purposes only. Do not forget to delete the usage of this function before the release.\n   * Use this function to attach the user to the experiment.\n   * @param experimentId identifier of the experiment\n   * @param groupId identifier of the experiment group\n   * @returns the promise for success result or throws an error otherwise.\n   */\n  attachUserToExperiment(experimentId: string, groupId: string): Promise<void>\n\n  /**\n   * This function should be used for the test purposes only. Do not forget to delete the usage of this function before the release.\n   * Use this function to detach the user from the experiment.\n   * @param experimentId identifier of the experiment\n   * @returns the promise for success result or throws an error otherwise.\n   */\n  detachUserFromExperiment(experimentId: string): Promise<void>\n\n  /**\n   * This function should be used for the test purposes only. Do not forget to delete the usage of this function before the release.\n   * Use this function to attach the user to the remote configuration.\n   * @param remoteConfigurationId identifier of the remote configuration\n   * @returns the promise for success result or throws an error otherwise.\n   */\n  attachUserToRemoteConfiguration(remoteConfigurationId: string): Promise<void>\n\n  /**\n   * This function should be used for the test purposes only. Do not forget to delete the usage of this function before the release.\n   * Use this function to detach the user from the remote configuration.\n   * @param remoteConfigurationId identifier of the remote configuration\n   * @returns the promise for success result or throws an error otherwise.\n   */\n  detachUserFromRemoteConfiguration(remoteConfigurationId: string): Promise<void>\n\n  /**\n   * Call this function to check if the fallback file is accessible.\n   * @returns the promise with the flag that indicates whether Qonversion was able to read data from the fallback file or not.\n   */\n  isFallbackFileAccessible(): Promise<Boolean>;\n\n  /**\n   * Sends your attribution {@link data} to the {@link provider}.\n   *\n   * @param data an object containing your attribution data\n   * @param provider the provider to which the data will be sent\n   */\n  attribution(data: Object, provider: AttributionProvider): void;\n\n  /**\n   * Sets Qonversion reserved user properties, like email or user id\n   *\n   * User properties are attributes you can set on a user level.\n   * You can send user properties to third party platforms as well as use them in Qonversion for customer segmentation\n   * and analytics.\n   *\n   * Note that using {@link UserPropertyKey.CUSTOM} here will do nothing.\n   * To set custom user property, use {@link setCustomUserProperty} method instead.\n   *\n   * @param key defined enum key that will be transformed to string.\n   * @param value property value.\n   *\n   * @see [documentation](https://documentation.qonversion.io/docs/user-properties)\n   */\n  setUserProperty(key: UserPropertyKey, value: string): void;\n\n  /**\n   * Adds custom user property.\n   *\n   * User properties are attributes you can set on a user level.\n   * You can send user properties to third party platforms as well as use them in Qonversion for customer segmentation\n   * and analytics.\n   *\n   * @param key custom user property key.\n   * @param value property value.\n   *\n   * @see [documentation](https://documentation.qonversion.io/docs/user-properties)\n   */\n  setCustomUserProperty(key: string, value: string): void;\n\n  /**\n   * This method returns all the properties, set for the current Qonversion user.\n   * All set properties are sent to the server with delay, so if you call\n   * this function right after setting some property, it may not be included\n   * in the result.\n   * @returns the promise with the user properties\n   */\n  userProperties(): Promise<UserProperties>;\n\n  /**\n   * Provide a listener to be notified about asynchronous user entitlements updates.\n   *\n   * Make sure you provide this listener for being up-to-date with the user entitlements.\n   * Else you can lose some important updates. Also, please, consider that this listener\n   * should live for the whole lifetime of the application.\n   *\n   * You may set entitlements listener both *after* Qonversion SDK initializing\n   * with {@link QonversionApi.setEntitlementsUpdateListener} and *while* Qonversion initializing\n   * with {@link Qonversion.initialize}.\n   *\n   * @param listener listener to be called when entitlements update\n   */\n  setEntitlementsUpdateListener(listener: EntitlementsUpdateListener): void;\n\n  /**\n   * iOS only. Does nothing if called on Android.\n   *\n   * On iOS 14.5+, after requesting the app tracking permission using ATT, you need to notify Qonversion if tracking\n   * is allowed and IDFA is available.\n   */\n  collectAdvertisingId(): void;\n\n  /**\n   * iOS only. Does nothing if called on Android.\n   *\n   * Enable attribution collection from Apple Search Ads.\n   */\n  collectAppleSearchAdsAttribution(): void;\n\n  /**\n   * iOS only. Does nothing if called on Android.\n   *\n   * Set the delegate to handle promo purchases.\n   * The delegate is called when a promo purchase from the App Store happens.\n   * @param delegate delegate to be called when event happens.\n   */\n  setPromoPurchasesDelegate(delegate: PromoPurchasesListener): void;\n\n  /**\n   * iOS only. Does nothing if called on Android.\n   *\n   * On iOS 14.0+ shows up a sheet for users to redeem App Store offer codes.\n   */\n  presentCodeRedemptionSheet(): void;\n}\n\nexport * from './dto/enums';\nexport * from './dto/Entitlement';\nexport * from './dto/IntroEligibility';\nexport * from './dto/Offering';\nexport * from './dto/Offerings';\nexport * from './dto/Product';\nexport * from './dto/QonversionError';\nexport * from './dto/User';\nexport * from './dto/UserProperty';\nexport * from './dto/UserProperties';\nexport * from './QonversionConfig';\nexport * from './QonversionConfigBuilder';\nexport * from './dto/Experiment';\nexport * from './dto/Transaction';\nexport * from './dto/RemoteConfig';\nexport * from './dto/RemoteConfigList';\nexport * from './dto/RemoteConfigurationSource';\nexport * from './dto/ExperimentGroup';\nexport * from './dto/SubscriptionPeriod';\nexport * from './dto/storeProducts/ProductInAppDetails';\nexport * from './dto/storeProducts/ProductInstallmentPlanDetails';\nexport * from './dto/storeProducts/ProductOfferDetails';\nexport * from './dto/storeProducts/ProductPrice';\nexport * from './dto/storeProducts/ProductPricingPhase';\nexport * from './dto/storeProducts/ProductStoreDetails';\nexport * from './dto/PurchaseModel';\nexport * from './dto/PurchaseUpdateModel';\nexport * from './dto/PurchaseOptions';\nexport * from './dto/PurchaseOptionsBuilder';\nexport * from './dto/EntitlementsUpdateListener';\nexport * from './dto/PromoPurchasesListener';\nexport * from './dto/storeProducts/SKProduct';\nexport * from './dto/storeProducts/SKProductDiscount';\nexport * from './dto/storeProducts/SKSubscriptionPeriod';\nexport * from './dto/storeProducts/SkuDetails';\nexport * from './dto/ActionResult';\n"]}